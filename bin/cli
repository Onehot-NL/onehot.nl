#!/usr/bin/env python
import os
import shutil
import subprocess
import sys
import traceback
import xml.etree.ElementTree as ET
from dataclasses import dataclass
from datetime import datetime
from enum import Enum
from pathlib import Path
from typing import Any, Iterator, List, NoReturn, Optional, Sequence, TypeVar

import jinja2
import markdown
import markupsafe
import typer
from pydantic import BaseModel, ValidationError
from ruamel.yaml import YAML  # type: ignore

cli = typer.Typer(add_completion=False)


@dataclass
class Dirs:
    root: Path
    web: Path
    build: Path
    templates: Path
    pages: Path

    @classmethod
    def from_env(cls) -> "Dirs":
        root = Path(os.environ["PROJECT_ROOT"])
        web = root / "web"
        build = root / "ignore" / "dist"
        templates = web / "templates"
        pages = web / "pages"
        return cls(
            root=root, web=web, build=build, templates=templates, pages=pages
        )


class FrontMatter(BaseModel):
    url: str


class Page(BaseModel):
    path: Path
    front_matter: FrontMatter


class Link(BaseModel):
    text: str
    url: str


class Speaker(BaseModel):
    name: str
    affiliation: str
    bio: str
    photo_url: str
    external_urls: List[Link]

    @property
    def bio_rendered(self) -> markupsafe.Markup:
        return render_markdown(self.bio)


class Talk(BaseModel):
    title: str
    subtitle: str
    speaker: Speaker
    abstract: str
    keywords: str

    @property
    def abstract_rendered(self) -> markupsafe.Markup:
        return render_markdown(self.abstract)


class EventType(Enum):
    MEETUP = "meetup"


class Event(BaseModel):
    title: str
    type: EventType
    description: str
    talks: List[Talk]
    date: str
    start_time: str
    end_time: str
    location: Link
    meetup_url: str
    linkedin_url: Optional[str]
    published: bool

    @property
    def title_escaped(self) -> str:
        return self.title.lower().replace(" ", "-").replace("'", "")

    @property
    def url(self) -> str:
        return f"/events/{self.date}-{self.title_escaped}"

    @property
    def index_file(self) -> Path:
        return (
            Path("events") / f"{self.date}-{self.title_escaped}" / "index.html"
        )

    @property
    def description_rendered(self) -> markupsafe.Markup:
        return render_markdown(self.description)

    @property
    def blurb(self) -> str:
        return self.description.split("\n\n")[0]

    @property
    def blurb_rendered(self) -> str:
        return render_markdown(self.blurb)

    @property
    def status(self) -> str:
        if datetime.strptime(self.date, "%Y-%m-%d") < datetime.today():
            return "past"
        else:
            return "upcoming"


class State(BaseModel):
    events: List[Event]


def yaml_decode(val: str) -> Any:
    return YAML(typ="base").load(val)


def render_markdown(text: str) -> markupsafe.Markup:
    rendered = markdown.markdown(text)
    return markupsafe.Markup(rendered)


def iter_pages(dirs: Dirs) -> Iterator[Page]:
    for path in (dirs.web / "pages").iterdir():
        front_matter_yaml, template = path.read_text().split("===")

        try:
            front_matter = FrontMatter.parse_obj(
                yaml_decode(front_matter_yaml)
            )
        except ValidationError as e:
            exit_validation_error(path.relative_to(dirs.root), e)

        # noinspection PyUnboundLocalVariable
        yield Page(path=path, front_matter=front_matter)


def load_state(dirs: Dirs) -> State:
    events_file = dirs.root / "events.yaml"
    try:
        return State.parse_obj(yaml_decode(events_file.read_text()))
    except ValidationError as e:
        exit_validation_error(events_file.relative_to(dirs.root), e)


def exit_validation_error(filename: Path, error: ValidationError) -> NoReturn:
    print(f"{filename}: Problems found")
    print(error)
    sys.exit(1)


def exit_jinja_error(e: jinja2.TemplateError) -> NoReturn:
    """
    Print a traceback for a Jina error limiting only to the frames
    within Jinja itself, then exit the program.
    """
    traceback_levels = 0
    tb = e.__traceback__
    while tb:
        if "__jinja_exception__" in tb.tb_frame.f_globals:
            traceback_levels += 1
        tb = tb.tb_next
    print(traceback.format_exc(limit=-traceback_levels))
    sys.exit(1)


@cli.command()
def build() -> None:
    """Build the site"""
    print("Building..")

    dirs = Dirs.from_env()

    shutil.rmtree(dirs.build, ignore_errors=True)
    dirs.build.mkdir(exist_ok=True, parents=True)

    for static in {"style.css", "logo.svg", "robots.txt"}:
        shutil.copy(dirs.web / static, dirs.build)

    for directory in {"img", "font"}:
        shutil.copytree(dirs.web / directory, dirs.build / directory)

    jinja_env = jinja2.Environment(
        loader=jinja2.ChoiceLoader(
            [
                jinja2.FileSystemLoader(dirs.templates),
                jinja2.FileSystemLoader(dirs.pages),
                jinja2.FileSystemLoader(dirs.web),  # For the 404 page.
            ]
        ),
        undefined=jinja2.StrictUndefined,
    )

    state = load_state(dirs)
    published_events = [e for e in state.events if e.published]

    for page in iter_pages(dirs):
        url = page.front_matter.url
        url_dir = dirs.build / url.lstrip("/")
        url_index_file = url_dir / "index.html"

        url_dir.mkdir(exist_ok=True)
        try:
            # Split the front-matter template lines from the final
            # template so they don't show up in the final result.
            # This is ugly, but makes error messages better than just
            # passing in the template without front-matter to Jinja
            # as a string.
            _front_matter, rendered = (
                jinja_env.get_template(page.path.name)
                .render(events=published_events, active_page=url)
                .split("===")
            )
        except jinja2.TemplateError as e:
            exit_jinja_error(e)

        url_index_file.write_text(rendered)

    for event in published_events:
        event_index_file = dirs.build / event.index_file
        event_index_file.parent.mkdir(exist_ok=True, parents=True)
        try:
            rendered = jinja_env.get_template("event.html").render(event=event)
        except jinja2.TemplateError as e:
            exit_jinja_error(e)
        event_index_file.write_text(rendered)

    try:
        rendered = jinja_env.get_template("404.html").render()
        (dirs.build / "404.html").write_text(rendered)
    except jinja2.TemplateError as e:
        exit_jinja_error(e)

    generate_sitemap(dirs)


def generate_sitemap(dirs: Dirs) -> None:
    index_files = dirs.build.glob("**/index.html")

    urlset_node = ET.Element("urlset")
    urlset_node.set("xmlns", "http://www.sitemaps.org/schemas/sitemap/0.9")

    for index in index_files:
        url_node = ET.SubElement(urlset_node, "url")
        loc_node = ET.SubElement(url_node, "loc")
        url = (
            str(index).removeprefix(str(dirs.build)).removesuffix("index.html")
        )
        loc_node.text = f"https://onehot.nl{url}"

    # This method is not picked up by mypy / PyCharm, but it does exist.
    ET.indent(urlset_node)  # type: ignore
    (dirs.build / "sitemap.xml").write_bytes(
        ET.tostring(urlset_node, xml_declaration=True, encoding="utf-8")
        + b"\n"
    )


@cli.command()
def deploy() -> None:
    """Build and deploy the site to GitHub pages."""
    build()

    # Check for uncommitted changes
    if (
        subprocess.run(["git", "diff-index", "--quiet", "HEAD"]).returncode
        != 0
    ):
        print("Please commit all changes before deploying")
        subprocess.run(["git", "update-index", "--refresh"])
        sys.exit(1)

    print("Deploying..")
    dirs = Dirs.from_env()

    current_branch = _check_proc(
        subprocess.run(
            ["git", "branch", "--show-current"], text=True, capture_output=True
        )
    ).stdout.strip()

    if current_branch != "master":
        print("Please check out `master` to deploy changes")
        sys.exit(1)

    current_commit = _check_proc(
        subprocess.run(
            ["git", "rev-parse", "HEAD"], text=True, capture_output=True
        )
    ).stdout.strip()
    current_dir = Path(".")

    _check_proc(subprocess.run(["git", "checkout", "deploy"]))

    try:
        for entry in dirs.build.iterdir():
            if entry.is_dir():
                shutil.copytree(entry, current_dir, dirs_exist_ok=True)
            elif entry.is_file():
                print(f"Copying {entry} to {current_dir / entry.name}")
                shutil.copy(entry, current_dir / entry.name)

        _check_proc(subprocess.run(["git", "add", "."]))
        _check_proc(
            subprocess.run(
                [
                    "git",
                    "commit",
                    "--no-verify",
                    "-m",
                    f"Deploy {current_commit}",
                ]
            )
        )
    finally:
        _check_proc(subprocess.run(["git", "checkout", current_branch]))


T = TypeVar("T")


def _check_proc(
    proc: subprocess.CompletedProcess[T],
) -> subprocess.CompletedProcess[T]:
    if proc.returncode == 0:
        return proc

    if proc.stdout:
        print("Standard output:")
        print(proc.stdout)

    if proc.stderr:
        print("Standard error:")
        print(proc.stderr)

    sys.exit(1)


if __name__ == "__main__":
    cli()
