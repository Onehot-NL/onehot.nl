#!/usr/bin/env python
import functools
import os
import shutil
from dataclasses import dataclass
from pathlib import Path
from typing import Optional

import jinja2
from ruamel.yaml import YAML  # type: ignore


@dataclass
class Dirs:
    root: Path
    web: Path
    build: Path

    @classmethod
    def from_env(cls) -> "Dirs":
        root = Path(os.environ["PROJECT_ROOT"])
        return cls(root=root, web=root / "web", build=root / "ignore" / "dist")


def get_yaml() -> YAML:
    yaml = YAML(typ="safe")
    yaml.default_flow_style = False
    return yaml


def load(dirs: Dirs, template_name: str) -> Optional[str]:
    template_file = dirs.web / "templates" / template_name
    if template_file.exists():
        return template_file.read_text()
    else:
        return None


def main() -> None:
    print("Building..")

    yaml = get_yaml()
    dirs = Dirs.from_env()

    shutil.rmtree(dirs.build, ignore_errors=True)
    dirs.build.mkdir(exist_ok=True, parents=True)

    for static in {"style.css", "logo.svg", "sitemap.xml", "robots.txt"}:
        shutil.copy(dirs.web / static, dirs.build)

    for directory in {"img", "font"}:
        shutil.copytree(dirs.web / directory, dirs.build / directory)

    load_fun = functools.partial(load, dirs)
    jinja_env = jinja2.Environment(loader=jinja2.FunctionLoader(load_fun))

    events_file = dirs.root / "events.yaml"
    events = yaml.load(events_file)
    events = [event for event in events if event["published"]]

    for page in (dirs.web / "pages").iterdir():
        front_matter_yaml, template = page.read_text().split("===")
        front_matter = yaml.load(front_matter_yaml)

        url = front_matter["url"]

        url_dir = dirs.build / url.lstrip("/")
        url_index_file = url_dir / "index.html"

        url_dir.mkdir(exist_ok=True)
        rendered = jinja_env.from_string(template).render(
            events=events, active_page=url
        )
        url_index_file.write_text(rendered)

    print("Done.")


if __name__ == "__main__":
    main()
