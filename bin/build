#!/usr/bin/env python
import os
import pathlib
import shutil
from typing import Optional

import jinja2
from ruamel.yaml import YAML  # type: ignore

print("Building..")


def get_yaml() -> YAML:
    yaml = YAML(typ="safe")
    yaml.default_flow_style = False
    return yaml


yaml = get_yaml()

project_root = pathlib.Path(os.environ["PROJECT_ROOT"])
web_dir = project_root / "web"
build_dir = project_root / "ignore" / "dist"
shutil.rmtree(build_dir, ignore_errors=True)
build_dir.mkdir(exist_ok=True, parents=True)

events_file = project_root / "events.yaml"
events = yaml.load(events_file)
events = [event for event in events if event["published"]]


for static in {"style.css", "logo.svg"}:
    shutil.copy(web_dir / static, build_dir)

for directory in {"img", "font"}:
    shutil.copytree(web_dir / directory, build_dir / directory)


def load(template_name: str) -> Optional[str]:
    template_file = web_dir / "templates" / template_name
    if template_file.exists():
        return template_file.read_text()
    else:
        return None


jinja_env = jinja2.Environment(loader=jinja2.FunctionLoader(load))

for page in (web_dir / "pages").iterdir():
    front_matter_yaml, template = page.read_text().split("===")
    front_matter = yaml.load(front_matter_yaml)

    url = front_matter["url"].lstrip("/")

    dest_dir = build_dir / url
    dest_file = build_dir / url / "index.html"

    dest_dir.mkdir(exist_ok=True)
    rendered = jinja_env.from_string(template).render(
        events=events, active_page=page
    )
    dest_file.write_text(rendered)

print("Done.")
