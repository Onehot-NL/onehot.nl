#!/usr/bin/env python
import functools
import os
import shutil
import subprocess
import xml.etree.ElementTree as ET
from dataclasses import dataclass
from enum import Enum
from pathlib import Path
from typing import Any, Iterator, List, Optional

import jinja2
import typer
from ruamel.yaml import YAML  # type: ignore

cli = typer.Typer(add_completion=False)


@dataclass
class Dirs:
    root: Path
    web: Path
    build: Path

    @classmethod
    def from_env(cls) -> "Dirs":
        root = Path(os.environ["PROJECT_ROOT"])
        return cls(root=root, web=root / "web", build=root / "ignore" / "dist")


@dataclass
class FrontMatter:
    url: str

    @classmethod
    def from_yaml(cls, yaml_val: Any) -> "FrontMatter":
        return cls(url=yaml_val["url"])


@dataclass
class Page:
    path: Path
    front_matter: FrontMatter
    template: str


@dataclass
class Link:
    name: str
    url: str


@dataclass
class Speaker:
    name: str
    affiliation: str
    bio: str
    photograph: str
    external_url: List[Link]


@dataclass
class Talk:
    title: str
    subtitle: str
    speaker: Speaker
    abstract: str
    keywords: str


class EventType(Enum):
    MEETUP = "meetup"


@dataclass
class Event:
    title: str
    type: EventType
    talks: List[Talk]
    date: str
    meetup_url: str
    published: bool


def get_yaml() -> YAML:
    yaml = YAML(typ="safe")
    yaml.default_flow_style = False
    return yaml


def load(dirs: Dirs, template_name: str) -> Optional[str]:
    template_file = dirs.web / "templates" / template_name
    if template_file.exists():
        return template_file.read_text()
    else:
        return None


def iter_pages(yaml: YAML, dirs: Dirs) -> Iterator[Page]:
    for path in (dirs.web / "pages").iterdir():
        front_matter_yaml, template = path.read_text().split("===")
        front_matter = FrontMatter.from_yaml(yaml.load(front_matter_yaml))
        yield Page(path, front_matter, template)


@cli.command()
def site() -> None:
    """Build the site"""
    print("Building..")

    yaml = get_yaml()
    dirs = Dirs.from_env()

    shutil.rmtree(dirs.build, ignore_errors=True)
    dirs.build.mkdir(exist_ok=True, parents=True)

    for static in {"style.css", "logo.svg", "sitemap.xml", "robots.txt"}:
        shutil.copy(dirs.web / static, dirs.build)

    for directory in {"img", "font"}:
        shutil.copytree(dirs.web / directory, dirs.build / directory)

    load_fun = functools.partial(load, dirs)
    jinja_env = jinja2.Environment(loader=jinja2.FunctionLoader(load_fun))

    events_file = dirs.root / "events.yaml"
    events = yaml.load(events_file)
    events = [event for event in events if event["published"]]

    for page in iter_pages(yaml, dirs):
        url = page.front_matter.url
        url_dir = dirs.build / url.lstrip("/")
        url_index_file = url_dir / "index.html"

        url_dir.mkdir(exist_ok=True)
        rendered = jinja_env.from_string(page.template).render(
            events=events, active_page=url
        )
        url_index_file.write_text(rendered)

    print("Done.")


@cli.command()
def sitemap() -> None:
    """Update sitemap.xml"""

    yaml = get_yaml()
    dirs = Dirs.from_env()

    last_modified = {}
    for page in iter_pages(yaml, dirs):
        url = page.front_matter.url

        # Fetch last modification date from git. Options:
        # `-1` - Only display the most recent commit message.
        # `--pretty=format:%cI` - Show committer date in strict ISO8601.
        last_modified[url] = subprocess.run(
            ["git", "log", "-1", "--pretty=format:%cI", page.path],
            check=True,
            text=True,
            capture_output=True,
        ).stdout.strip()

    # Build the sitemap
    urlset_node = ET.Element("urlset")
    urlset_node.set("xmlns", "http://www.sitemaps.org/schemas/sitemap/0.9")

    for url, timestamp in last_modified.items():
        url_node = ET.SubElement(urlset_node, "url")
        loc_node = ET.SubElement(url_node, "loc")
        loc_node.text = f"https://onehot.nl{url}"
        lastmod_node = ET.SubElement(url_node, "lastmod")
        lastmod_node.text = timestamp

    # This method is not picked up by mypy / PyCharm, but it does exist.
    ET.indent(urlset_node)  # type: ignore
    (dirs.web / "sitemap.xml").write_bytes(
        ET.tostring(urlset_node, xml_declaration=True, encoding="utf-8")
    )


if __name__ == "__main__":
    cli()
